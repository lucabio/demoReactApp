{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["Radium","props","react_default","a","createElement","className","style","@media (min-width: 500px)","width","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","hobbie","showPersons","initialState","_this","nameChangeHandler","event","personIndex","findIndex","p","person","Object","objectSpread","target","toConsumableArray","setState","deletePersonHandler","index","splice","console","log","restorePersonsArray","togglePersonsHandler","doesShow","_this2","this","backgroundColor","font","border","padding","cursor","color",":hover","map","element","Person_Person","key","restorePersons","length","classes","push","style_root","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b978f1f1.chunk.js","sourcesContent":["import React from 'react';\nimport './Person.css';\nimport Radium from 'radium';\n\nconst person = (props) => {\n    const style = {\n        '@media (min-width: 500px)' : {\n            width:'450px'\n        }\n    }\n    return (\n        <div className=\"Person\" style={style}>\n            <p onClick={props.click}>I'm a {props.name} and i'm {props.age} years old</p>\n            <p>{props.children}</p>\n            <input type=\"text\" onChange={props.changed} value={props.name}/>\n        </div>\n    )\n}\n\nexport default Radium(person);","import React,{ Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\nimport Radium,{ StyleRoot } from 'radium';\n\nclass App extends Component {\n    state = {\n      persons : [\n        {\n          id : 0,\n          name : 'Luca',\n          age : '34',\n          hobbie: 'I like get drunk'\n        },\n        {\n          id : 1,\n          name : 'Silvia',\n          age : '31',\n          hobbie : 'I like chilling and play Nintendo Switch'\n        },\n        {\n          id : 2,\n          name : 'Lorenzo',\n          age : '29',\n          hobbie : 'I\\'m a funcking genius'\n        },\n      ],\n      showPersons : false\n    };\n\n    initialState = {...this.state};\n\n    nameChangeHandler = ( event , id ) => {\n      //console.log('button clicked');\n      // DON'T DO THIS :: this.state.persons[0].name = 'Luca';\n\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      })\n\n      const person = {...this.state.persons[personIndex]};\n\n      person.name = event.target.value;\n\n      const persons = [...this.state.persons];\n\n      persons[personIndex] = person;\n\n      this.setState({persons : persons});\n    };\n\n    deletePersonHandler = (index) => {\n      //ES6 Sintax\n      const persons = [...this.state.persons];\n      persons.splice(index,1);\n      console.log(persons,this.state.persons);\n      this.setState({persons : persons});\n    }\n\n    restorePersonsArray = () => {\n      this.setState(this.initialState);\n    }\n\n    togglePersonsHandler = () =>{\n        const doesShow = this.state.showPersons;\n        this.setState({showPersons:!doesShow});\n    }\n\n    render(){\n      const style = {\n        backgroundColor : 'green',\n        font:'inherit',\n        border:'1px solid black',\n        padding : '8px',\n        cursor : 'pointer',\n        color : 'white',\n        ':hover' : {\n          backgroundColor : 'lightgreen',\n          color : 'black'\n        }\n      }\n\n      let persons = null;\n\n      if (this.state.showPersons) {\n        persons = (\n          <div >\n          { this.state.persons.map( (element,index) => {\n            return <Person\n              click={() => this.deletePersonHandler(index)}\n              name={element.name} \n              age={element.age}\n              key={element.id}\n              changed={(event) => this.nameChangeHandler(event,element.id)}>\n              My hobbies : {element.hobbie}\n              </Person>\n          })}\n          </div>\n        );\n\n        style.backgroundColor = 'red';\n        style[':hover'] = {\n          backgroundColor:'salmon',\n          color : 'white'\n        }\n      }\n\n      let restorePersons = null;\n\n      if(this.state.persons.length === 0){\n        restorePersons  = (<button style={style} onClick={this.restorePersonsArray}>Restore Persons</button>);\n      }\n\n      const classes = [];\n\n      if(this.state.persons.length <= 2){\n        classes.push('red') //classes will be [red]\n      }\n\n      if(this.state.persons.length <= 1){\n        classes.push('bold') // classes will be [red,bold]\n      }\n\n      if(this.state.persons.length === 0){\n        classes.push('green') // classes will be [red,bold]\n      }\n\n      return (\n        <StyleRoot>\n        <div className=\"App\">\n          <header>\n            <h1>Hi i'm a React App</h1>\n            <p className={classes.join(' ')}>This lessons are really teaching me something!</p>\n            <button style={style} onClick={this.togglePersonsHandler}>Toggle Persons</button>\n            {restorePersons}\n            {persons}\n        </header>\n       </div>\n       </StyleRoot>\n     );\n    //return React.createElement('div',{className:'App'},React.createElement('h1',null,'I\\'m a react app!! '));\n    }\n}\n\nexport default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}